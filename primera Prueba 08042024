#include <iostream>
#include <string>
#include <vector>
#include <curl/curl.h>
#include <json/json.h>
#include <espeak/speak.h>

// Definir las variables
std::string API_KEY = "TU_API_KEY"; // Reemplaza "TU_API_KEY" con tu API key de Google Translate
std::string idioma_origen = "es"; // Español
std::string idioma_destino = "en"; // Inglés
std::string texto_a_traducir;
std::string texto_traducido;
std::vector<char> buffer;

// Función para realizar la traducción
bool traducir_texto(const std::string& texto_a_traducir, std::string& texto_traducido) {
  // Configurar la solicitud
  CURL *curl = curl_easy_init();
  std::string url = "https://translation.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=" + idioma_destino + "&dt=t&q=" + texto_a_traducir;
  curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &escribir_respuesta);
  curl_easy_setopt(curl, CURLOPT_WRITEDATA, &buffer);
  curl_easy_perform(curl);
  curl_easy_cleanup(curl);

  // Parsear la respuesta JSON
  Json::Value root;
  Json::Reader reader;
  reader.parse(buffer.data(), buffer.size(), root);

  // Obtener el texto traducido
  texto_traducido = root["data"]["translations"][0]["translatedText"].asString();

  return true;
}

// Función principal
int main() {
  // Obtener el texto a traducir del usuario
  std::cout << "Ingrese el texto a traducir: ";
  std::getline(std::cin, texto_a_traducir);

  // Traducir el texto
  traducir_texto(texto_a_traducir, texto_traducido);

  // Mostrar el texto traducido
  std::cout << "Texto traducido: " << texto_traducido << std::endl;

  // Reproducir el audio de la traducción
  espeak_Initialize(AUDIO_OUTPUT_SYNCH_PLAYBACK, 0, NULL, 0);
  espeak_SetVoiceByName("en"); // Ajusta el idioma de la voz
  espeak_Synth(texto_traducido.c_str(), texto_traducido.length(), 0, POS_CHARACTER, 0, NULL, NULL);

  return 0;
}
