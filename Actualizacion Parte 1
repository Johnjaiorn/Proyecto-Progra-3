#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>

#ifdef _WIN32
#define CLEAR_SCREEN "cls"
#else
#define CLEAR_SCREEN "clear"
#endif

struct Translation {
    std::string italian;
    std::string french;
    std::string german;
    std::string english;
};

struct TreeNode {
    std::string word;
    Translation translation;
    TreeNode* left;
    TreeNode* right;
    
    TreeNode(const std::string& w, const Translation& t) : word(w), translation(t), left(nullptr), right(nullptr) {}
};

class TranslationTree {
private:
    TreeNode* root;

public:
    TranslationTree() : root(nullptr) {}

    void insert(const std::string& word, const Translation& translation) {
        root = insertRecursive(root, word, translation);
    }

    Translation* translate(const std::string& word) {
        TreeNode* node = findNode(root, word);
        if (node != nullptr) {
            return &node->translation;
        }
        return nullptr;
    }

    void remove(const std::string& word) {
        root = removeRecursive(root, word);
    }

private:
    TreeNode* insertRecursive(TreeNode* node, const std::string& word, const Translation& translation) {
        if (node == nullptr) {
            return new TreeNode(word, translation);
        }

        if (word < node->word) {
            node->left = insertRecursive(node->left, word, translation);
        } else if (word > node->word) {
            node->right = insertRecursive(node->right, word, translation);
        } else {
            node->translation = translation; // Update translation if word already exists
        }

        return node;
    }

    TreeNode* findNode(TreeNode* node, const std::string& word) {
        if (node == nullptr || node->word == word) {
            return node;
        }

        if (word < node->word) {
            return findNode(node->left, word);
        } else {
            return findNode(node->right, word);
        }
    }

    TreeNode* removeRecursive(TreeNode* node, const std::string& word) {
        if (node == nullptr) {
            return nullptr;
        }

        if (word < node->word) {
            node->left = removeRecursive(node->left, word);
        } else if (word > node->word) {
            node->right = removeRecursive(node->right, word);
        } else {
            if (node->left == nullptr && node->right == nullptr) {
                delete node;
                return nullptr;
            } else if (node->left == nullptr) {
                TreeNode* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            } else {
                TreeNode* minRight = findMin(node->right);
                node->word = minRight->word;
                node->translation = minRight->translation;
                node->right = removeRecursive(node->right, minRight->word);
            }
        }

        return node;
    }

    TreeNode* findMin(TreeNode* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }
};

void speak(const std::string& text) {
    std::string command = "espeak \"" + text + "\"";
    system(command.c_str());
}

int main() {
    TranslationTree translationTree;

    std::ifstream file("translations.txt");
    if (file.is_open()) {
        std::string word;
        Translation translation;
        while (file >> word >> translation.italian >> translation.french >> translation.german >> translation.english) {
            translationTree.insert(word, translation);
        }
        file.close();
    }

    std::cout << "Bienvenido al traductor multilingue!" << std::endl;

    int choice;
    std::string word;
    while (true) {
        system(CLEAR_SCREEN);
        std::cout << "Seleccione una opcion:" << std::endl;
        std::cout << "1. Traducir una palabra" << std::endl;
        std::cout << "2. Agregar una nueva palabra y traducción" << std::endl;
        std::cout << "3. Corregir una traducción" << std::endl;
        std::cout << "4. Borrar una traducción" << std::endl;
        std::cout << "5. Salir" << std::endl;
        std::cin >> choice;

        switch (choice) {
            case 1:
                std::cout << "Ingrese la palabra a traducir: ";
                std::cin >> word;
                {
                    Translation* translation = translationTree.translate(word);
                    if (translation != nullptr) {
                        std::cout << "Traduccion:" << std::endl;
                        std::cout << "Italiano: " << translation->italian << std::endl;
                        std::cout << "Frances: " << translation->french << std::endl;
                        std::cout << "Aleman: " << translation->german << std::endl;
                        std::cout << "Ingles: " << translation->english << std::endl;
                        speak(translation->italian);
                        speak(translation->french);
                        speak(translation->german);
                        speak(translation->english);
                    } else {
                        std::cout << "La palabra no está en el diccionario." << std::endl;
                    }
                }
                break;
            case 2:
                std::cout << "Ingrese la palabra: ";
                std::cin >> word;
                {
                    Translation translation;
                    std::cout << "Ingrese la traducción en italiano: ";
                    std::cin >> translation.italian;
                    std::cout << "Ingrese la traducción en francés: ";
                    std::cin >> translation.french;
                    std::cout << "Ingrese la traducción en alemán: ";
                    std::cin >> translation.german;
                    std::cout << "Ingrese la traducción en inglés: ";
                    std::cin >> translation.english;

                    translationTree.insert(word, translation);
                    std::cout << "Palabra y traducciones agregadas exitosamente." << std::endl;
                }
                break;
            case 3:
                std::cout << "Ingrese la palabra a corregir: ";
                std::cin >> word;
                {
                    Translation* translation = translationTree.translate(word);
                    if (translation != nullptr) {
                        std::cout << "Traducción actual: " << std::endl;
                        std::cout << "Italiano: " << translation->italian << std::endl;
                        std::cout << "Frances: " << translation->french << std::endl;
                        std::cout << "Aleman: " << translation->german << std::endl;
                        std::cout << "Ingles: " << translation->english << std::endl;

                        std::cout << "Ingrese la nueva traducción en italiano: ";
                        std::cin >> translation->italian;
                        std::cout << "Ingrese la nueva traducción en francés: ";
                        std::cin >> translation->french;
                        std::cout << "Ingrese la nueva traducción en alemán: ";
                        std::cin >> translation->german;
                        std::cout << "Ingrese la nueva traducción en inglés: ";
                        std::cin >> translation->english;

                        std::cout << "Traducción corregida exitosamente." << std::endl;
                    } else {
                        std::cout << "La palabra no está en el diccionario." << std::endl;
                    }
                }
                break;
            case 4:
                std::cout << "Ingrese la palabra a borrar: ";
                std::cin >> word;
                translationTree.remove(word);
                std::cout << "Traducción borrada exitosamente." << std::endl;
                break;
            case 5:
                {
                    std::ofstream outFile("translations.txt");
                    // Aquí se puede implementar una función para guardar el árbol en el archivo
                    outFile.close();
                }
                std::cout << "Gracias por usar el traductor multilingüe. ¡Hasta luego!" << std::endl;
                return 0;
            default:
                std::cout << "Opción inválida. Por favor, seleccione una opción válida." << std::endl;
                break;
        }
        std::cout << "Presione Enter para continuar...";
        std::cin.ignore();
        std::cin.get();
    }

    return 0;
}
