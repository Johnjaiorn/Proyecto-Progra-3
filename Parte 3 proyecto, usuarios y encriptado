#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <sstream>
#include <vector>

#ifdef _WIN32
#define LIMPIAR_PANTALLA "cls"
#else
#define LIMPIAR_PANTALLA "clear"
#endif

struct Traduccion {
    std::string italiano;
    std::string frances;
    std::string aleman;
    std::string ingles;
};

struct Usuario {
    std::string nombreUsuario;
    std::string contrasenaEncriptada;
    std::string llaveEncriptacion;
};

void actualizarArchivoDeTraducciones(const std::string& palabra, const Traduccion* traduccion);

struct NodoAVL {
    std::string palabra;
    Traduccion traduccion;
    int altura;
    NodoAVL* izquierda;
    NodoAVL* derecha;
};

class ArbolAVL {
private:
    NodoAVL* raiz;

    int altura(NodoAVL* nodo) {
        if (nodo == nullptr) return 0;
        return nodo->altura;
    }

    int factorBalance(NodoAVL* nodo) {
        if (nodo == nullptr) return 0;
        return altura(nodo->izquierda) - altura(nodo->derecha);
    }

    NodoAVL* rotarDerecha(NodoAVL* y) {
        NodoAVL* x = y->izquierda;
        NodoAVL* T2 = x->derecha;

        x->derecha = y;
        y->izquierda = T2;

        y->altura = std::max(altura(y->izquierda), altura(y->derecha)) + 1;
        x->altura = std::max(altura(x->izquierda), altura(x->derecha)) + 1;

        return x;
    }

    NodoAVL* rotarIzquierda(NodoAVL* x) {
        NodoAVL* y = x->derecha;
        NodoAVL* T2 = y->izquierda;

        y->izquierda = x;
        x->derecha = T2;

        x->altura = std::max(altura(x->izquierda), altura(x->derecha)) + 1;
        y->altura = std::max(altura(y->izquierda), altura(y->derecha)) + 1;

        return y;
    }

    NodoAVL* insertarNodo(NodoAVL* nodo, const std::string& palabra, const Traduccion& traduccion) {
        if (nodo == nullptr) {
            NodoAVL* nuevoNodo = new NodoAVL;
            nuevoNodo->palabra = palabra;
            nuevoNodo->traduccion = traduccion;
            nuevoNodo->altura = 1;
            nuevoNodo->izquierda = nullptr;
            nuevoNodo->derecha = nullptr;
            return nuevoNodo;
        }

        if (palabra < nodo->palabra) {
            nodo->izquierda = insertarNodo(nodo->izquierda, palabra, traduccion);
        } else if (palabra > nodo->palabra) {
            nodo->derecha = insertarNodo(nodo->derecha, palabra, traduccion);
        } else {
            nodo->traduccion = traduccion;
            return nodo;
        }

        nodo->altura = std::max(altura(nodo->izquierda), altura(nodo->derecha)) + 1;

        int balance = factorBalance(nodo);

        if (balance > 1 && palabra < nodo->izquierda->palabra)
            return rotarDerecha(nodo);

        if (balance < -1 && palabra > nodo->derecha->palabra)
            return rotarIzquierda(nodo);

        if (balance > 1 && palabra > nodo->izquierda->palabra) {
            nodo->izquierda = rotarIzquierda(nodo->izquierda);
            return rotarDerecha(nodo);
        }

        if (balance < -1 && palabra < nodo->derecha->palabra) {
            nodo->derecha = rotarDerecha(nodo->derecha);
            return rotarIzquierda(nodo);
        }

        return nodo;
    }

    NodoAVL* nodoValorMinimo(NodoAVL* nodo) {
        NodoAVL* actual = nodo;
        while (actual->izquierda != nullptr) {
            actual = actual->izquierda;
        }
        return actual;
    }

    NodoAVL* eliminarNodo(NodoAVL* raiz, const std::string& palabra) {
        if (raiz == nullptr) return raiz;

        if (palabra < raiz->palabra)
            raiz->izquierda = eliminarNodo(raiz->izquierda, palabra);
        else if (palabra > raiz->palabra)
            raiz->derecha = eliminarNodo(raiz->derecha, palabra);
        else {
            if (raiz->izquierda == nullptr || raiz->derecha == nullptr) {
                NodoAVL* temp = raiz->izquierda ? raiz->izquierda : raiz->derecha;

                if (temp == nullptr) {
                    temp = raiz;
                    raiz = nullptr;
                } else {
                    *raiz = *temp;
                }
                delete temp;
            } else {
                NodoAVL* temp = nodoValorMinimo(raiz->derecha);
                raiz->palabra = temp->palabra;
                raiz->traduccion = temp->traduccion;
                raiz->derecha = eliminarNodo(raiz->derecha, temp->palabra);
            }
        }

        if (raiz == nullptr) return raiz;

        raiz->altura = 1 + std::max(altura(raiz->izquierda), altura(raiz->derecha));

        int balance = factorBalance(raiz);

        if (balance > 1 && factorBalance(raiz->izquierda) >= 0)
            return rotarDerecha(raiz);

        if (balance > 1 && factorBalance(raiz->izquierda) < 0) {
            raiz->izquierda = rotarIzquierda(raiz->izquierda);
            return rotarDerecha(raiz);
        }

        if (balance < -1 && factorBalance(raiz->derecha) <= 0)
            return rotarIzquierda(raiz);

        if (balance < -1 && factorBalance(raiz->derecha) > 0) {
            raiz->derecha = rotarDerecha(raiz->derecha);
            return rotarIzquierda(raiz);
        }

        actualizarArchivoDeTraducciones(palabra, nullptr);

        return raiz;
    }

    Traduccion* buscarNodo(NodoAVL* raiz, const std::string& palabra) {
        if (raiz == nullptr) return nullptr;

        if (raiz->palabra == palabra || 
            raiz->traduccion.italiano == palabra || 
            raiz->traduccion.frances == palabra || 
            raiz->traduccion.aleman == palabra || 
            raiz->traduccion.ingles == palabra) {
            return &raiz->traduccion;
        }

        Traduccion* resultadoIzquierda = buscarNodo(raiz->izquierda, palabra);
        if (resultadoIzquierda != nullptr) return resultadoIzquierda;

        return buscarNodo(raiz->derecha, palabra);
    }

public:
    ArbolAVL() : raiz(nullptr) {}

    void insertar(const std::string& palabra, const Traduccion& traduccion) {
        raiz = insertarNodo(raiz, palabra, traduccion);
    }

    void eliminar(const std::string& palabra) {
        raiz = eliminarNodo(raiz, palabra);
    }

    Traduccion* buscar(const std::string& palabra) {
        return buscarNodo(raiz, palabra);
    }

    NodoAVL* obtenerRaiz() {
        return raiz;
    }
};

void hablar(const std::string& texto) {
    std::string comando = "espeak \"" + texto + "\"";
    system(comando.c_str());
}

std::string encriptarPalabra(const std::string& palabra) {
    std::map<char, std::string> mapeoEncriptado;
    std::ifstream archivo("encriptado.txt");
    if (!archivo.is_open()) {
        std::cerr << "Error al abrir el archivo de encriptado." << std::endl;
        return palabra;
    }

    char letra;
    std::string codigo;
    while (archivo >> letra >> codigo) {
        mapeoEncriptado[letra] = codigo;
    }
    archivo.close();

    std::string palabraEncriptada;
    for (char c : palabra) {
        if (mapeoEncriptado.find(c) != mapeoEncriptado.end()) {
            palabraEncriptada += mapeoEncriptado[c];
        } else {
            palabraEncriptada += c;
        }
    }
    return palabraEncriptada;
}

std::string encriptarContrasena(const std::string& contrasena, const std::string& llave) {
    std::string resultado = contrasena;
    for (size_t i = 0; i < contrasena.size(); ++i) {
        resultado[i] ^= llave[i % llave.size()];
    }
    return resultado;
}

void encriptarArchivo(const std::string& nombreArchivo, const std::string& llave) {
    std::ifstream archivoEntrada(nombreArchivo, std::ios::binary);
    std::ofstream archivoSalida(nombreArchivo + ".enc", std::ios::binary);
    if (archivoEntrada.is_open() && archivoSalida.is_open()) {
        char c;
        size_t i = 0;
        while (archivoEntrada.get(c)) {
            c ^= llave[i % llave.size()];
            archivoSalida.put(c);
            ++i;
        }
        archivoEntrada.close();
        archivoSalida.close();
    } else {
        std::cerr << "Error al abrir los archivos para encriptar." << std::endl;
    }
}

void desencriptarArchivo(const std::string& nombreArchivo, const std::string& llave) {
    std::ifstream archivoEntrada(nombreArchivo, std::ios::binary);
    std::ofstream archivoSalida(nombreArchivo + ".dec", std::ios::binary);
    if (archivoEntrada.is_open() && archivoSalida.is_open()) {
        char c;
        size_t i = 0;
        while (archivoEntrada.get(c)) {
            c ^= llave[i % llave.size()];
            archivoSalida.put(c);
            ++i;
        }
        archivoEntrada.close();
        archivoSalida.close();
    } else {
        std::cerr << "Error al abrir los archivos para desencriptar." << std::endl;
    }
}

void guardarUsuario(const Usuario& usuario) {
    std::ofstream archivo("usuarios.dat", std::ios::app | std::ios::binary);
    if (archivo.is_open()) {
        archivo.write(usuario.nombreUsuario.c_str(), usuario.nombreUsuario.size());
        archivo.write("\n", 1);
        archivo.write(usuario.contrasenaEncriptada.c_str(), usuario.contrasenaEncriptada.size());
        archivo.write("\n", 1);
        archivo.write(usuario.llaveEncriptacion.c_str(), usuario.llaveEncriptacion.size());
        archivo.write("\n", 1);
        archivo.close();
    } else {
        std::cerr << "Error al abrir el archivo de usuarios." << std::endl;
    }
}

std::vector<Usuario> cargarUsuarios() {
    std::vector<Usuario> usuarios;
    std::ifstream archivo("usuarios.dat", std::ios::binary);
    if (archivo.is_open()) {
        std::string nombreUsuario;
        std::string contrasenaEncriptada;
        std::string llaveEncriptacion;
        while (std::getline(archivo, nombreUsuario) &&
               std::getline(archivo, contrasenaEncriptada) &&
               std::getline(archivo, llaveEncriptacion)) {
            Usuario usuario = {nombreUsuario, contrasenaEncriptada, llaveEncriptacion};
            usuarios.push_back(usuario);
        }
        archivo.close();
    } else {
        std::cerr << "Error al abrir el archivo de usuarios." << std::endl;
    }
    return usuarios;
}

bool registrarUsuario(const std::string& nombreUsuario, const std::string& contrasena) {
    std::vector<Usuario> usuarios = cargarUsuarios();
    for (const auto& usuario : usuarios) {
        if (usuario.nombreUsuario == nombreUsuario) {
            std::cerr << "El nombre de usuario ya existe." << std::endl;
            return false;
        }
    }
    std::string llaveEncriptacion = "llave"; // Generar una llave única para cada usuario
    std::string contrasenaEncriptada = encriptarContrasena(contrasena, llaveEncriptacion);
    Usuario nuevoUsuario = {nombreUsuario, contrasenaEncriptada, llaveEncriptacion};
    guardarUsuario(nuevoUsuario);
    return true;
}

bool autenticarUsuario(const std::string& nombreUsuario, const std::string& contrasena) {
    std::vector<Usuario> usuarios = cargarUsuarios();
    for (const auto& usuario : usuarios) {
        if (usuario.nombreUsuario == nombreUsuario) {
            std::string contrasenaEncriptada = encriptarContrasena(contrasena, usuario.llaveEncriptacion);
            return contrasenaEncriptada == usuario.contrasenaEncriptada;
        }
    }
    return false;
}

void actualizarArchivoDeTraducciones(const std::string& palabra, const Traduccion* traduccion) {
    std::ifstream archivoEntrada("traducciones.txt");
    std::ofstream archivoTemporal("temporal.txt");

    if (archivoEntrada.is_open() && archivoTemporal.is_open()) {
        std::string linea;
        while (std::getline(archivoEntrada, linea)) {
            std::vector<std::string> tokens;
            std::istringstream iss(linea);
            std::string token;
            while (iss >> token) {
                tokens.push_back(token);
            }
            if (!tokens.empty() && tokens[0] == palabra) {
                if (traduccion != nullptr) {
                    archivoTemporal << palabra << " " << traduccion->italiano << " " << traduccion->frances << " " << traduccion->aleman << " " << traduccion->ingles << std::endl;
                }
            } else {
                archivoTemporal << linea << std::endl;
            }
        }
        archivoEntrada.close();
        archivoTemporal.close();
        remove("traducciones.txt");
        rename("temporal.txt", "traducciones.txt");
    } else {
        std::cerr << "Error: No se pudo abrir el archivo traducciones.txt para escribir." << std::endl;
    }
}

void guardarHistorialBusqueda(const std::string& nombreUsuario, const std::map<std::string, int>& historial) {
    std::ofstream archivo(nombreUsuario + "_historial.txt");
    if (archivo.is_open()) {
        for (const auto& entrada : historial) {
            archivo << entrada.first << " " << entrada.second << std::endl;
        }
        archivo.close();
    } else {
        std::cerr << "Error al abrir el archivo de historial de búsqueda para el usuario." << std::endl;
    }
}

std::map<std::string, int> cargarHistorialBusqueda(const std::string& nombreUsuario) {
    std::map<std::string, int> historial;
    std::ifstream archivo(nombreUsuario + "_historial.txt");
    if (archivo.is_open()) {
        std::string palabra;
        int cantidad;
        while (archivo >> palabra >> cantidad) {
            historial[palabra] = cantidad;
        }
        archivo.close();
    } else {
        std::cerr << "Error al abrir el archivo de historial de búsqueda para el usuario." << std::endl;
    }
    return historial;
}
int main() {
    ArbolAVL arbolDeTraducciones;
    std::map<std::string, int> historialBusqueda;
    std::string nombreUsuario;
    std::string contrasena;
    int opcion;

    while (true) {
        std::cout << "-----------------------------------------" << std::endl;
        std::cout << "Bienvenido al Traductor, Escoja una Opción" << std::endl;
        std::cout << "1. Registrar usuario" << std::endl;
        std::cout << "2. Iniciar sesión" << std::endl;
        std::cout << "-----------------------------------------" << std::endl;
        std::cin >> opcion;

        if (std::cin.fail() || (opcion != 1 && opcion != 2)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Opción no válida. Por favor, seleccione una opción válida." << std::endl;
            std::cout << "Presione Enter para continuar...";
            system(LIMPIAR_PANTALLA);
            std::cin.get();
            continue;
        }

        if (opcion == 1) {
            std::cout << "Ingrese un nombre de usuario: ";
            std::cin >> nombreUsuario;
            std::cout << "Ingrese una contraseña: ";
            std::cin >> contrasena;
            if (!registrarUsuario(nombreUsuario, contrasena)) {
                return 0;
            }
        } else if (opcion == 2) {
            bool autenticado = false;
            while (!autenticado) {
                std::cout << "Nombre de usuario: ";
                std::cin >> nombreUsuario;
                std::cout << "Contraseña: ";
                std::cin >> contrasena;
                if (!autenticarUsuario(nombreUsuario, contrasena)) {
                    std::cerr << "Error de autenticación. Intente nuevamente." << std::endl;
                    std::cout << "Presione Enter para continuar...";
                    std::cin.ignore();
                    std::cin.get();
                    system(LIMPIAR_PANTALLA); // Limpia la pantalla después de que el usuario presione Enter
                } else {
                    autenticado = true;
                }
            }
        }
        break; // Salir del bucle inicial después de una opción válida
    }

    std::ifstream archivo("traducciones.txt");
    if (archivo.is_open()) {
        std::string palabra;
        Traduccion traduccion;
        while (archivo >> palabra >> traduccion.italiano >> traduccion.frances >> traduccion.aleman >> traduccion.ingles) {
            arbolDeTraducciones.insertar(palabra, traduccion);
        }
        archivo.close();
    }

    historialBusqueda = cargarHistorialBusqueda(nombreUsuario);

    while (true) {
        system(LIMPIAR_PANTALLA);
        std::cout << "-----------------------------------------" << std::endl;
        std::cout << "Seleccione una opción:" << std::endl;
        std::cout << "1. Traducir una palabra" << std::endl;
        std::cout << "2. Agregar una nueva palabra y traducción" << std::endl;
        std::cout << "3. Corregir una traducción" << std::endl;
        std::cout << "4. Borrar una traducción" << std::endl;
        std::cout << "5. Mostrar historial de búsqueda" << std::endl;
        std::cout << "6. Salir" << std::endl;
        std::cout << "-----------------------------------------" << std::endl;
        std::cin >> opcion;

        if (std::cin.fail()) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Opción no válida. Por favor, seleccione una opción válida." << std::endl;
            std::cout << "Presione Enter para continuar...";
            std::cin.get();
            continue;
        }

        switch (opcion) {
            case 1: {
                std::cout << "Ingrese la palabra a traducir: ";
                std::string palabra;
                std::cin >> palabra;

                Traduccion* traduccion = arbolDeTraducciones.buscar(palabra);
                if (traduccion != nullptr) {
                    std::cout << "Traducción:" << std::endl;

                    NodoAVL* nodo = arbolDeTraducciones.obtenerRaiz();
                    std::string palabraEspanol;

                    while (nodo != nullptr) {
                        if (nodo->palabra == palabra ||
                            nodo->traduccion.italiano == palabra ||
                            nodo->traduccion.frances == palabra ||
                            nodo->traduccion.aleman == palabra ||
                            nodo->traduccion.ingles == palabra) {
                            palabraEspanol = nodo->palabra;
                            break;
                        }

                        if (palabra < nodo->palabra) {
                            nodo = nodo->izquierda;
                        } else {
                            nodo = nodo->derecha;
                        }
                    }

                    std::cout << "Español: " << palabraEspanol << std::endl;
                    hablar(palabraEspanol);

                    if (traduccion->italiano != palabra) {
                        std::cout << "Italiano: " << traduccion->italiano << std::endl;
                        hablar(traduccion->italiano);
                    }
                    if (traduccion->frances != palabra) {
                        std::cout << "Francés: " << traduccion->frances << std::endl;
                        hablar(traduccion->frances);
                    }
                    if (traduccion->aleman != palabra) {
                        std::cout << "Alemán: " << traduccion->aleman << std::endl;
                        hablar(traduccion->aleman);
                    }
                    if (traduccion->ingles != palabra) {
                        std::cout << "Inglés: " << traduccion->ingles << std::endl;
                        hablar(traduccion->ingles);
                    }

                    historialBusqueda[palabra]++;

                    guardarHistorialBusqueda(nombreUsuario, historialBusqueda);

                    std::string palabraEncriptada = encriptarPalabra(palabra);
                    std::ofstream archivoEncriptado("palabras_encriptadas.txt", std::ios::app);
                    archivoEncriptado << palabraEncriptada << std::endl;
                    archivoEncriptado.close();
                } else {
                    std::cout << "La palabra no está en el diccionario." << std::endl;
                }
                break;
            }
            case 2: {
                std::cout << "Ingrese la palabra: ";
                std::string palabra;
                std::cin >> palabra;

                Traduccion traduccion;
                std::cout << "Ingrese la traducción en italiano: ";
                std::cin >> traduccion.italiano;
                std::cout << "Ingrese la traducción en francés: ";
                std::cin >> traduccion.frances;
                std::cout << "Ingrese la traducción en alemán: ";
                std::cin >> traduccion.aleman;
                std::cout << "Ingrese la traducción en inglés: ";
                std::cin >> traduccion.ingles;

                arbolDeTraducciones.insertar(palabra, traduccion);
                std::cout << "Palabra y traducciones agregadas exitosamente." << std::endl;

                std::ofstream archivoSalida("traducciones.txt", std::ios::app);
                if (archivoSalida.is_open()) {
                    archivoSalida << palabra << " " << traduccion.italiano << " " << traduccion.frances << " " << traduccion.aleman << " " << traduccion.ingles << std::endl;
                    archivoSalida.close();
                } else {
                    std::cerr << "Error: No se pudo abrir el archivo traducciones.txt para escribir." << std::endl;
                }
                break;
            }
            case 3: {
                std::cout << "Ingrese la palabra a corregir: ";
                std::string palabra;
                std::cin >> palabra;

                Traduccion* traduccion = arbolDeTraducciones.buscar(palabra);
                if (traduccion != nullptr) {
                    std::cout << "Traducción actual: " << std::endl;
                    std::cout << "Italiano: " << traduccion->italiano << std::endl;
                    std::cout << "Francés: " << traduccion->frances << std::endl;
                    std::cout << "Alemán: " << traduccion->aleman << std::endl;
                    std::cout << "Inglés: " << traduccion->ingles << std::endl;

                    std::cout << "Ingrese la nueva traducción en italiano: ";
                    std::cin >> traduccion->italiano;
                    std::cout << "Ingrese la nueva traducción en francés: ";
                    std::cin >> traduccion->frances;
                    std::cout << "Ingrese la nueva traducción en alemán: ";
                    std::cin >> traduccion->aleman;
                    std::cout << "Ingrese la nueva traducción en inglés: ";
                    std::cin >> traduccion->ingles;

                    std::cout << "Traducción corregida exitosamente." << std::endl;

                    actualizarArchivoDeTraducciones(palabra, traduccion);
                } else {
                    std::cout << "La palabra no está en el diccionario." << std::endl;
                }
                break;
            }
            case 4: {
                std::cout << "Ingrese la palabra a borrar: ";
                std::string palabra;
                std::cin >> palabra;

                Traduccion* traduccion = arbolDeTraducciones.buscar(palabra);
                if (traduccion != nullptr) {
                    arbolDeTraducciones.eliminar(palabra);
                    std::cout << "Traducción borrada exitosamente." << std::endl;
                    actualizarArchivoDeTraducciones(palabra, nullptr);
                } else {
                    std::cout << "La palabra no está en el diccionario." << std::endl;
                }
                break;
            }
            case 5: {
                if (historialBusqueda.empty()) {
                    std::cout << "El historial de búsqueda está vacío." << std::endl;
                } else {
                    std::cout << "Historial de búsqueda:" << std::endl;

                    std::vector<std::pair<std::string, int>> vectorHistorial(historialBusqueda.begin(), historialBusqueda.end());

                    std::sort(vectorHistorial.begin(), vectorHistorial.end(),
                              [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {
                                  return b.second < a.second;
                              });

                    for (int i = 0; i < 5 && i < vectorHistorial.size(); ++i) {
                        std::cout << vectorHistorial[i].first << ": " << vectorHistorial[i].second << " veces" << std::endl;
                    }
                }
                break;
            }
            case 6: {
                std::cout << "¡Gracias por usar el traductor multilingüe! ¡Hasta luego!" << std::endl;
                guardarHistorialBusqueda(nombreUsuario, historialBusqueda);
                return 0;
            }
            default:
                std::cout << "Opción no válida. Por favor, seleccione una opción válida." << std::endl;
                std::cout << "Presione Enter para continuar...";
                std::cin.ignore();
                std::cin.get();
                break;
        }

        std::cout << "Presione Enter para continuar...";
        std::cin.ignore();
        std::cin.get();
    }

    return 0;
}
