#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <cstdlib>
#include <algorithm>

#ifdef _WIN32
#define CLEAR_SCREEN "cls"
#else
#define CLEAR_SCREEN "clear"
#endif

struct Translation {
    std::string italian;
    std::string french;
    std::string german;
    std::string english;
};

class AVLTree {
private:
    struct Node {
        std::string word;
        Translation translation;
        Node* left;
        Node* right;
        int height;

        Node(const std::string& word, const Translation& translation)
            : word(word), translation(translation), left(nullptr), right(nullptr), height(1) {}
    };

    Node* root;

    // Funciones auxiliares de un árbol AVL
    int height(Node* node);
    int balanceFactor(Node* node);
    void updateHeight(Node* node);
    Node* rotateRight(Node* node);
    Node* rotateLeft(Node* node);
    Node* balance(Node* node);
    Node* insert(Node* node, const std::string& word, const Translation& translation);
    Node* minValueNode(Node* node);
    Node* deleteNode(Node* root, const std::string& word);
    void inOrderTraversal(Node* node, std::ofstream& outFile);
    void destroy(Node* node);

public:
    AVLTree() : root(nullptr) {}
    ~AVLTree();

    void insert(const std::string& word, const Translation& translation);
    void remove(const std::string& word);
    void saveToFile(const std::string& filename);
    Translation* translate(const std::string& word);
};

int AVLTree::height(Node* node) {
    if (node == nullptr) {
        return 0;
    }
    return node->height;
}

int AVLTree::balanceFactor(Node* node) {
    if (node == nullptr) {
        return 0;
    }
    return height(node->left) - height(node->right);
}

void AVLTree::updateHeight(Node* node) {
    if (node != nullptr) {
        node->height = std::max(height(node->left), height(node->right)) + 1;
    }
}

AVLTree::Node* AVLTree::rotateRight(Node* node) {
    Node* newRoot = node->left;
    node->left = newRoot->right;
    newRoot->right = node;
    updateHeight(node);
    updateHeight(newRoot);
    return newRoot;
}

AVLTree::Node* AVLTree::rotateLeft(Node* node) {
    Node* newRoot = node->right;
    node->right = newRoot->left;
    newRoot->left = node;
    updateHeight(node);
    updateHeight(newRoot);
    return newRoot;
}

AVLTree::Node* AVLTree::balance(Node* node) {
    updateHeight(node);
    int balanceFactorNode = balanceFactor(node);
    if (balanceFactorNode > 1) {
        if (balanceFactor(node->left) < 0) {
            node->left = rotateLeft(node->left);
        }
        return rotateRight(node);
    } else if (balanceFactorNode < -1) {
        if (balanceFactor(node->right) > 0) {
            node->right = rotateRight(node->right);
        }
        return rotateLeft(node);
    }
    return node;
}

AVLTree::Node* AVLTree::insert(Node* node, const std::string& word, const Translation& translation) {
    if (node == nullptr) {
        return new Node(word, translation);
    }

    if (word < node->word) {
        node->left = insert(node->left, word, translation);
    } else if (word > node->word) {
        node->right = insert(node->right, word, translation);
    } else {
        // Duplicate word, update translation
        node->translation = translation;
        return node;
    }

    return balance(node);
}

AVLTree::Node* AVLTree::minValueNode(Node* node) {
    Node* current = node;
    while (current->left != nullptr) {
        current = current->left;
    }
    return current;
}

AVLTree::Node* AVLTree::deleteNode(Node* root, const std::string& word) {
    if (root == nullptr) {
        return root;
    }

    if (word < root->word) {
        root->left = deleteNode(root->left, word);
    } else if (word > root->word) {
        root->right = deleteNode(root->right, word);
    } else {
        if (root->left == nullptr || root->right == nullptr) {
            Node* temp = root->left ? root->left : root->right;
            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            } else {
                *root = *temp;
            }
            delete temp;
        } else {
            Node* temp = minValueNode(root->right);
            root->word = temp->word;
            root->translation = temp->translation;
            root->right = deleteNode(root->right, temp->word);
        }
    }

    if (root == nullptr) {
        return root;
    }

    return balance(root);
}

void AVLTree::inOrderTraversal(Node* node, std::ofstream& outFile) {
    if (node != nullptr) {
        inOrderTraversal(node->left, outFile);
        outFile << node->word << " " << node->translation.italian << " " << node->translation.french
                << " " << node->translation.german << " " << node->translation.english << std::endl;
        inOrderTraversal(node->right, outFile);
    }
}

void AVLTree::destroy(Node* node) {
    if (node != nullptr) {
        destroy(node->left);
        destroy(node->right);
        delete node;
    }
}

AVLTree::~AVLTree() {
    destroy(root);
}

void AVLTree::insert(const std::string& word, const Translation& translation) {
    root = insert(root, word, translation);
}

void AVLTree::remove(const std::string& word) {
    root = deleteNode(root, word);
}

void AVLTree::saveToFile(const std::string& filename) {
    std::ofstream outFile(filename);
    if (outFile.is_open()) {
        inOrderTraversal(root, outFile);
        outFile.close();
    } else {
        std::cerr << "Error: No se pudo abrir el archivo " << filename << " para escritura." << std::endl;
    }
}

Translation* AVLTree::translate(const std::string& word) {
    Node* current = root;
    while (current != nullptr) {
        if (word < current->word) {
            current = current->left;
        } else if (word > current->word) {
            current = current->right;
        } else {
            return &(current->translation);
        }
    }
    return nullptr;
}

void speak(const std::string& text) {
    std::string command = "espeak \"" + text + "\"";
    system(command.c_str());
}

std::string encryptWord(const std::string& word) {
    std::string encryptedWord;
    for (char c : word) {
        switch (c) {
            case 'a': encryptedWord += "U1"; break;
            case 'e': encryptedWord += "U2"; break;
            case 'i': encryptedWord += "U3"; break;
            case 'o': encryptedWord += "U4"; break;
            case 'u': encryptedWord += "U5"; break;
            case 'A': encryptedWord += "U6"; break;
            case 'E': encryptedWord += "U7"; break;
            case 'I': encryptedWord += "U8"; break;
            case 'O': encryptedWord += "U9"; break;
            case 'U': encryptedWord += "U10"; break;
            case 'b': encryptedWord += "m1"; break;
            case 'c': encryptedWord += "m2"; break;
            case 'd': encryptedWord += "m3"; break;
            case 'f': encryptedWord += "m4"; break;
            case 'g': encryptedWord += "m5"; break;
            case 'h': encryptedWord += "m6"; break;
            case 'j': encryptedWord += "m7"; break;
            case 'k': encryptedWord += "m8"; break;
            case 'l': encryptedWord += "m9"; break;
            case 'm': encryptedWord += "m10"; break;
            case 'n': encryptedWord += "m11"; break;
            case 'ñ': encryptedWord += "m12"; break;
            case 'p': encryptedWord += "m13"; break;
            case 'q': encryptedWord += "m14"; break;
            case 'r': encryptedWord += "m15"; break;
            case 's': encryptedWord += "m16"; break;
            case 't': encryptedWord += "m17"; break;
            case 'v': encryptedWord += "m18"; break;
            case 'w': encryptedWord += "m19"; break;
            case 'x': encryptedWord += "m20"; break;
            case 'y': encryptedWord += "m21"; break;
            case 'z': encryptedWord += "m22"; break;
            case 'B': encryptedWord += "g1"; break;
            case 'C': encryptedWord += "g2"; break;
            case 'D': encryptedWord += "g3"; break;
            case 'F': encryptedWord += "g4"; break;
            case 'G': encryptedWord += "g5"; break;
            case 'H': encryptedWord += "g6"; break;
            case 'J': encryptedWord += "g7"; break;
            case 'K': encryptedWord += "g8"; break;
            case 'L': encryptedWord += "g9"; break;
            case 'M': encryptedWord += "g10"; break;
            case 'N': encryptedWord += "g11"; break;
            case 'Ñ': encryptedWord += "g12"; break;
            case 'P': encryptedWord += "g13"; break;
            case 'Q': encryptedWord += "g14"; break;
            case 'R': encryptedWord += "g15"; break;
            case 'S': encryptedWord += "g16"; break;
            case 'T': encryptedWord += "g17"; break;
            case 'V': encryptedWord += "g18"; break;
            case 'W': encryptedWord += "g19"; break;
            case 'X': encryptedWord += "g20"; break;
            case 'Y': encryptedWord += "g21"; break;
            case 'Z': encryptedWord += "g22"; break;
            default: encryptedWord += c; break;
        }
    }
    return encryptedWord;
}

int main() {
    AVLTree translationTree;
    std::map<std::string, int> searchHistory;

    std::ifstream file("translations.txt");
    if (file.is_open()) {
        std::string word;
        Translation translation;
        while (file >> word >> translation.italian >> translation.french >> translation.german >> translation.english) {
            translationTree.insert(word, translation);
        }
        file.close();
    }

    std::cout << "Bienvenido al traductor multilingue!" << std::endl;

    int choice;
    std::string word;
    while (true) {
        system(CLEAR_SCREEN);
        std::cout << "Seleccione una opcion:" << std::endl;
        std::cout << "1. Traducir una palabra" << std::endl;
        std::cout << "2. Agregar una nueva palabra y traducción" << std::endl;
        std::cout << "3. Corregir una traducción" << std::endl;
        std::cout << "4. Borrar una traducción" << std::endl;
        std::cout << "5. Ver historial de búsquedas" << std::endl;
        std::cout << "6. Salir" << std::endl;
        std::cin >> choice;

        switch (choice) {
            case 1:
                std::cout << "Ingrese la palabra a traducir: ";
                std::cin >> word;
                {
                    Translation* translation = translationTree.translate(word);
                    if (translation != nullptr) {
                        std::cout << "Traducción:" << std::endl;
                        std::cout << "Italiano: " << translation->italian << std::endl;
                        std::cout << "Frances: " << translation->french << std::endl;
                        std::cout << "Aleman: " << translation->german << std::endl;
                        std::cout << "Ingles: " << translation->english << std::endl;
                        speak(translation->italian);
                        speak(translation->french);
                        speak(translation->german);
                        speak(translation->english);

                        // Guardar la palabra encriptada en el historial
                        std::string encryptedWord = encryptWord(word);
                        searchHistory[encryptedWord]++;

                        // Guardar el historial en el archivo
                        std::ofstream historyFile("search_history.txt", std::ios::app);
                        if (historyFile.is_open()) {
                            historyFile << encryptedWord << std::endl;
                            historyFile.close();
                        } else {
                            std::cerr << "Error: No se pudo abrir el archivo search_history.txt para escritura." << std::endl;
                        }
                    } else {
                        std::cout << "La palabra no está en el diccionario." << std::endl;
                    }
                }
                break;
            case 2:
                std::cout << "Ingrese la palabra: ";
                std::cin >> word;
                {
                    Translation translation;
                    std::cout << "Ingrese la traducción en italiano: ";
                    std::cin >> translation.italian;
                    std::cout << "Ingrese la traducción en francés: ";
                    std::cin >> translation.french;
                    std::cout << "Ingrese la traducción en alemán: ";
                    std::cin >> translation.german;
                    std::cout << "Ingrese la traducción en inglés: ";
                    std::cin >> translation.english;

                    translationTree.insert(word, translation);
                    std::cout << "Palabra y traducciones agregadas exitosamente." << std::endl;
                }
                break;
            case 3:
                std::cout << "Ingrese la palabra a corregir: ";
                std::cin >> word;
                {
                    Translation* translation = translationTree.translate(word);
                    if (translation != nullptr) {
                        std::cout << "Traducción actual: " << std::endl;
                        std::cout << "Italiano: " << translation->italian << std::endl;
                        std::cout << "Frances: " << translation->french << std::endl;
                        std::cout << "Aleman: " << translation->german << std::endl;
                        std::cout << "Ingles: " << translation->english << std::endl;

                        std::cout << "Ingrese la nueva traducción en italiano: ";
                        std::cin >> translation->italian;
                        std::cout << "Ingrese la nueva traducción en francés: ";
                        std::cin >> translation->french;
                        std::cout << "Ingrese la nueva traducción en alemán: ";
                        std::cin >> translation->german;
                        std::cout << "Ingrese la nueva traducción en inglés: ";
                        std::cin >> translation->english;

                        std::cout << "Traducción corregida exitosamente." << std::endl;
                    } else {
                        std::cout << "La palabra no está en el diccionario." << std::endl;
                    }
                }
                break;
            case 4:
                std::cout << "Ingrese la palabra a borrar: ";
                std::cin >> word;
                translationTree.remove(word);
                std::cout << "Traducción borrada exitosamente." << std::endl;
                break;
            case 5:
                std::cout << "Historial de búsquedas:" << std::endl;
                for (const auto& entry : searchHistory) {
                    std::cout << entry.first << ": " << entry.second << std::endl;
                }
                break;
            case 6:
                translationTree.saveToFile("translations.txt");
                std::cout << "Gracias por usar el traductor multilingue. ¡Hasta luego!" << std::endl;
                return 0;
            default:
                std::cout << "Opción inválida. Por favor, seleccione una opción válida." << std::endl;
                break;
        }
        std::cout << "Presione Enter para continuar...";
        std::cin.ignore();
        std::cin.get();
    }

    return 0;
}
